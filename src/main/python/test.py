import os
import random
from configparser import ConfigParser

from colorama import Fore, Style  # Assuming colorama library is used

from logger import load_logger
from repository import Repository  # Assuming Repository class is defined

# Constants
SEPARATOR = "#@#@#@#@#@#@#@#@#@"
RESOURCE_PATH = "../resources/"

class Test:
    config = ConfigParser()
    config.read("config.ini")

    # DB
    user = config.get("DB", "user")
    password = config.get("DB", "password")

    def __init__(self, folder_quantity, file_quantity):
        self.folder_quantity = folder_quantity
        self.file_quantity = file_quantity

    def generate_files_and_folders(self):
        # Create the "resources" folder if it doesn't exist
        if not os.path.exists(RESOURCE_PATH):
            os.makedirs(RESOURCE_PATH)

        # Generate folders
        for i in range(1, self.folder_quantity + 1):
            folder_name = f"test_folder_{i}"
            folder_path = os.path.join(RESOURCE_PATH, folder_name)
            if not os.path.exists(folder_path):
                os.makedirs(folder_path)

            # Generate files
            for j in range(1, self.file_quantity + 1):
                file_name = f"file_{i}_{j}.txt"
                file_path = os.path.join(f"../resources/test_folder_{i}/", file_name)
                with open(file_path, "w") as file:
                    # Write something to the file (customize this)
                    file.write(f"Content of file {j}")

    def delete_files_and_folders(self):
        # Delete folders generated by generate_files_and_folders() starting with "test"
        if os.path.exists("../resources/"):
            for root, dirs, files in os.walk("../resources/", topdown=False):
                for dir in dirs:
                    if dir.startswith("test_folder_"):
                        dir_path = os.path.join(root, dir)
                        dir_full_path = os.path.join(root, dir)
                        for file in os.listdir(dir_full_path):
                            file_path = os.path.join(dir_full_path, file)
                            os.remove(file_path)
                        os.rmdir(dir_path)
        with open("../logs/9999-99-99_error_log.txt", 'w') as file:
            file.truncate()
        print("Folders generated by the test have been deleted.")

    def modify_file(self, folder, file):
        # Modify a file within a specific folder
        file_path = os.path.join(f"../resources/test_folder_{folder}", f"file_{folder}_{file}.txt")

        if os.path.exists(file_path):
            with open(file_path, "a", encoding='utf-8') as file:
                # Modify the content of the file
                file.write("\nModification in the file.")
            print(f"Modified: {file_path}")

    def check_logs(self):
        try:
            with open("../logs/9999-99-99_error_log.txt", 'r') as file:
                lines = file.readlines()
                line_count = len(lines)
                return line_count
        except FileNotFoundError:
            print("The file was not found.")
            return None
        except Exception as e:
            print(f"An error occurred: {e}")
            return None

    def test1_modify_one_file_with_one_file(self):
        self.generate_files_and_folders()

        repository = Repository(self.user, self.password)
        repository.load_data()
        file_to_modify = random.randint(1, self.file_quantity)
        folder_to_modify = random.randint(1, self.folder_quantity)
        self.modify_file(folder_to_modify, file_to_modify)
        repository.one_file(f"file_{folder_to_modify}_{file_to_modify}.txt")
        passed = False

        result = self.check_logs()

        print(SEPARATOR)
        print("Test using the one_file function and modifying a file.")
        print(SEPARATOR)
        print(f"\n{Fore.CYAN}{'=' * 40}{Style.RESET_ALL}")
        print(f"{Fore.YELLOW}Modified file:{Style.RESET_ALL} file_{folder_to_modify}_{file_to_modify}.txt")
        print(f"{Fore.CYAN}{'=' * 40}{Style.RESET_ALL}\n")
        print(result)
        if result == 1:
            print(f"{Fore.GREEN}TEST PASSED: Only one file has been modified.{Style.RESET_ALL}")
            passed = True
        else:
            print(f"{Fore.RED}TEST FAILED: The test has failed.{Style.RESET_ALL}")
        print(SEPARATOR)

        self.delete_files_and_folders()
        return passed

    def test2_modify_all_with_all_files(self):
        self.generate_files_and_folders()
        repository = Repository(self.user, self.password)
        repository.load_data()
        for i in range(1, self.folder_quantity + 1):
            for j in range(1, self.file_quantity + 1):
                self.modify_file(i, j)
        repository.all_files()
        passed = False

        result = self.check_logs()

        print("#@#@#@#@#@#@#@#@#@")
        print("Test using the all_files function and modifying all files.")
        print("#@#@#@#@#@#@#@#@#@")
        if result == self.file_quantity * self.folder_quantity:
            print(f"{Fore.GREEN}TEST PASSED: {result} files have been modified, the test is correct.{Style.RESET_ALL}")
            passed = True
        else:
            print(f"{Fore.RED}TEST FAILED: The test has failed.{Style.RESET_ALL}")
        print("#@#@#@#@#@#@#@#@#@")

        self.delete_files_and_folders()
        return passed

    def test3_modify_one_file_with_all_files(self):
        self.generate_files_and_folders()
        repository = Repository(self.user, self.password)
        repository.load_data()
        file_to_modify = random.randint(1, self.file_quantity)
        folder_to_modify = random.randint(1, self.folder_quantity)
        self.modify_file(folder_to_modify, file_to_modify)
        repository.all_files()
        passed = False

        result = self.check_logs()

        print("#@#@#@#@#@#@#@#@#@")
        print("Test using the all_files function and modifying one file.")
        print("#@#@#@#@#@#@#@#@#@")
        print(f"\n{Fore.CYAN}{'=' * 40}{Style.RESET_ALL}")
        print(f"{Fore.YELLOW}Modified file:{Style.RESET_ALL} file_{folder_to_modify}_{file_to_modify}.txt")
        print(f"{Fore.CYAN}{'=' * 40}{Style.RESET_ALL}\n")
        if result == 1:
            print(f"{Fore.GREEN}TEST PASSED: Only one file has been modified.{Style.RESET_ALL}")
            passed = True
        else:
            print(f"{Fore.RED}TEST FAILED: The test has failed.{Style.RESET_ALL}")
        print("#@#@#@#@#@#@#@#@#@")

        self.delete_files_and_folders()
        return passed

    def test4_modify_zero_files_with_one_file(self):
        self.generate_files_and_folders()
        repository = Repository(self.user, self.password)
        repository.load_data()
        file_to_modify = random.randint(1, self.file_quantity)
        folder_to_modify = random.randint(1, self.folder_quantity)
        repository.one_file(f"file_{folder_to_modify}_{file_to_modify}.txt")
        result = self.check_logs()
        passed = False

        print("#@#@#@#@#@#@#@#@#@")
        print("Test using the one_file function and not modifying any file.")
        print("#@#@#@#@#@#@#@#@#@")
        if result == 0:
            print(f"{Fore.GREEN}TEST PASSED: No files have been modified.{Style.RESET_ALL}")
            passed = True
        else:
            print(f"{Fore.RED}TEST FAILED: The test has failed.{Style.RESET_ALL}")
        print("#@#@#@#@#@#@#@#@#@")

        self.delete_files_and_folders()
        return passed

    def test5_modify_zero_files_with_all_files(self):
        self.generate_files_and_folders()
        repository = Repository(self.user, self.password)
        repository.load_data()
        repository.all_files()
        result = self.check_logs()
        passed = False

        print("#@#@#@#@#@#@#@#@#@")
        print("Test using the all_files function and not modifying any file.")
        print("#@#@#@#@#@#@#@#@#@")
        if result == 0:
            print(f"{Fore.GREEN}TEST PASSED: No files have been modified.{Style.RESET_ALL}")
            passed = True
        else:
            print(f"{Fore.RED}TEST FAILED: The test has failed.{Style.RESET_ALL}")
        print("#@#@#@#@#@#@#@#@#@")

        self.delete_files_and_folders()
        return passed

    def run_tests(self):
        try:
            test_instance = Test(self.folder_quantity, self.file_quantity)

            test1 = test_instance.test1_modify_one_file_with_one_file()
            test2 = test_instance.test2_modify_all_with_all_files()
            test3 = test_instance.test3_modify_one_file_with_all_files()
            test4 = test_instance.test4_modify_zero_files_with_one_file()
            test5 = test_instance.test5_modify_zero_files_with_all_files()

            print("\n#@#@#@#@#@#@#@#@#@")
            print("Summary of Tests:")
            print("#@#@#@#@#@#@#@#@#@")
            print(f"{Fore.CYAN}{'=' * 40}{Style.RESET_ALL}")

            if test1 and test2 and test3 and test4 and test5:
                print(f"{Fore.GREEN}TESTS PASSED: All tests have passed correctly.{Style.RESET_ALL}")
            else:
                print(f"{Fore.RED}TESTS FAILED: At least one test has failed.{Style.RESET_ALL}")

            print(f"{Fore.CYAN}{'=' * 40}{Style.RESET_ALL}\n")

        except Exception as e:
            print(f"An error occurred while running the tests: {e}")
            return False


if __name__ == "__main__":
    load_logger(is_test=True)
    test_instance = Test(3, 5)

    test_results = test_instance.run_tests()


